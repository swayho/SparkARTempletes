//==============================================================================
// Welcome to shader authoring in Spark AR Studio!
//==============================================================================

#import <gradients>
#import <sdf>


float r_distance(vec2 v1, vec2 v2, float xy_ratio){
  float dx = pow(v2.x - v1.x, 2.);
  float dy = pow((v2.y - v1.y) / xy_ratio, 2.);
  return sqrt(dx + dy);
}

void main(in function<vec4(vec2)> tex_t, in function<vec4(vec2)> tex_b, in vec4 o_color, in vec2 resolution, in float s_space, in float o_space, out vec4 fragColor) {
  vec2 uv = fragment(std::getVertexTexCoord());
  float xy_ratio = resolution.x/resolution.y;
  float remain_size_x = 1. - o_space * 2.;
  float remain_size_y = (1. - o_space * 2. * xy_ratio - s_space)/2. * xy_ratio;
  vec2 bot_center = vec2(.5, .5 + s_space/2. + remain_size_x * xy_ratio * .5);
  vec2 top_center = vec2(.5, .5 - s_space/2. - remain_size_x * xy_ratio * .5);
  float radius = remain_size_x * .5;
  vec2 s_uv = (uv - .5)/remain_size_x + .5;
  vec2 t_uv = vec2(s_uv.x, s_uv.y + .5 - top_center.y / remain_size_x);
  vec2 b_uv = vec2(s_uv.x, s_uv.y - (bot_center.y / remain_size_x - .5));
  float smooth = 720./resolution.x * .01;
  float b_alpha = 1. - smoothstep(radius - smooth, radius + smooth, r_distance(bot_center, uv, xy_ratio));
  float t_alpha = 1. - smoothstep(radius - smooth, radius + smooth, r_distance(top_center, uv, xy_ratio));
  vec4 result = tex_t(t_uv) * t_alpha + tex_b(b_uv) * b_alpha;
  fragColor = mix(o_color, result, result.a);
}
